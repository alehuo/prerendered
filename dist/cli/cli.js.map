{"version":3,"sources":["webpack://prerendered_cli/webpack/universalModuleDefinition","webpack://prerendered_cli/webpack/bootstrap","webpack://prerendered_cli/external \"path\"","webpack://prerendered_cli/./src/cli/cli.ts","webpack://prerendered_cli/external \"fs\"","webpack://prerendered_cli/external \"inquirer\"","webpack://prerendered_cli/external \"webpack\"","webpack://prerendered_cli/external \"commander\"","webpack://prerendered_cli/./src/cli/webpack.prerendered.ts","webpack://prerendered_cli/external \"terser-webpack-plugin\"","webpack://prerendered_cli/external \"clean-webpack-plugin\"","webpack://prerendered_cli/external \"webpack-manifest-plugin\""],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","require","program","version","option","command","description","action","_source","_destination","existsSync","join","process","cwd","Error","console","log","questions","type","message","prompt","then","answers","entrypoint","data","client","entryPoint","writeFileSync","JSON","stringify","cfgPath","cfg","parse","readFileSync","toString","webpackConfig","createConfig","debug","err","stats","hasErrors","error","toJson","errors","map","info","hasWarnings","warnings","warn","argv","entry","pathPrefix","tsConfigPath","resolve","__dirname","config","output","path","filename","chunkFilename","rules","test","exclude","include","dirname","loader","options","configFile","extensions","devtool","target","optimization","minimize","minimizer","parallel","terserOptions","compress","ecma","mangle","sourceMap","plugins","CleanWebpackPlugin","publicPath","fileName"],"mappings":"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","file":"cli.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"prerendered_cli\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"prerendered_cli\"] = factory();\n\telse\n\t\troot[\"prerendered_cli\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"path\");","/* eslint-disable no-console */\nimport fs from 'fs';\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport webpack from 'webpack';\nimport { program } from 'commander';\nimport { createConfig } from './webpack.prerendered';\n\nprogram.version('0.0.1');\n\ninterface PrerenderedConfig {\n  client: {\n    entryPoint: string;\n  }\n}\n\nprogram\n  .option('--debug, -d', 'Enable debug printing');\n\nprogram.command('init').description('Initialize prerendered')\n  .action((_source, _destination) => {\n    if (fs.existsSync(path.join(process.cwd(), 'prerendered.json'))) {\n      throw new Error('Error! prerendered.json already exists. Please delete it before proceeding.');\n    }\n    console.log('Thank you for using prerendered. I will now ask a few questions about your app.');\n    console.log('A configuration file will be created to the project root which is used by the build command.');\n    console.log(`The folder I will use as a base will be ${process.cwd()}`);\n\n    const questions: inquirer.QuestionCollection<{\n      entrypoint: string\n    }> = [\n      {\n        type: 'input', name: 'entrypoint', message: `What is your client entrypoint? (Current working dir: ${process.cwd()})`,\n      },\n    ];\n\n    inquirer\n      .prompt(questions)\n      .then((answers) => {\n        if (answers.entrypoint === '') {\n          throw new Error('Error! No entrypoint given');\n        }\n        if (!fs.existsSync(path.join(process.cwd(), answers.entrypoint))) {\n          throw new Error('Error! Entrypoint does not exist');\n        }\n        const data: PrerenderedConfig = {\n          client: {\n            entryPoint: answers.entrypoint,\n          },\n        };\n        fs.writeFileSync(path.join(process.cwd(), 'prerendered.json'), JSON.stringify(data, null, 2));\n        console.log('Created prerendered.json');\n      });\n  });\n\nprogram.command('build').description('Build prerendered')\n  .action((_source, _destination) => {\n    if (!fs.existsSync(path.join(process.cwd(), 'prerendered.json'))) {\n      throw new Error('Error! prerendered.json not found. Please run `prerendered init`');\n    }\n    console.log('Bunding app');\n    const cfgPath = path.join(process.cwd(), 'prerendered.json');\n    console.log('prerendered.json location: %s', cfgPath);\n    const cfg: PrerenderedConfig = JSON.parse(fs.readFileSync(cfgPath).toString('utf-8'));\n    const webpackConfig = createConfig(cfg.client.entryPoint, program.debug);\n    webpack(webpackConfig, (err, stats) => {\n      if (err !== null || stats.hasErrors()) {\n        if (err !== null && err.message) {\n          console.error(err.message);\n        }\n        if (stats.hasErrors()) {\n          const info = stats.toJson();\n          info.errors.map(console.error);\n        }\n        throw new Error('Error! Webpack: Failed to compile');\n      }\n      const info = stats.toJson();\n\n      if (stats.hasErrors()) {\n        info.errors.map(console.error);\n      }\n\n      if (stats.hasWarnings()) {\n        info.warnings.map(console.warn);\n      }\n\n      console.log('Webpack: Done!');\n    });\n  });\n\nprogram.parse(process.argv);\n","module.exports = require(\"fs\");","module.exports = require(\"inquirer\");","module.exports = require(\"webpack\");","module.exports = require(\"commander\");","import { dirname, resolve } from 'path';\nimport TerserPlugin from 'terser-webpack-plugin';\nimport webpack from 'webpack';\nimport { CleanWebpackPlugin } from 'clean-webpack-plugin';\nimport ManifestPlugin from 'webpack-manifest-plugin';\n\nexport const createConfig = (entry: string, debug = false) => {\n  const pathPrefix = 'static';\n  const tsConfigPath = resolve(__dirname, 'tsconfig.prr.json');\n  const config: webpack.Configuration = {\n    mode: 'production',\n    entry: resolve(process.cwd(), entry),\n    output: {\n      path: resolve(process.cwd(), '.prerendered', pathPrefix),\n      filename: '[name].[contenthash].js',\n      chunkFilename: '[id]-[chunkhash].js',\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.tsx?$/,\n          exclude: [\n            /node_modules/,\n          ],\n          include: [resolve(process.cwd(), dirname(entry))],\n          loader: 'ts-loader',\n          options: {\n            configFile: tsConfigPath,\n          },\n        },\n      ],\n    },\n    resolve: {\n      extensions: ['.js', '.jsx', '.ts', '.tsx'],\n    },\n    devtool: 'source-map',\n    target: 'web',\n    optimization: {\n      minimize: true,\n      minimizer: [\n        new TerserPlugin({\n          parallel: true,\n          terserOptions: {\n            compress: false,\n            ecma: 6,\n            mangle: true,\n          },\n          sourceMap: true,\n          test: /\\.js(\\?.*)?$/i,\n        }),\n      ],\n    },\n    plugins: [\n      new CleanWebpackPlugin(),\n      new ManifestPlugin({\n        publicPath: `${pathPrefix}/`,\n        fileName: resolve(process.cwd(), '.prerendered', 'manifest.json'),\n      }),\n    ],\n  };\n  if (debug) {\n    console.log('tsconfig.prr.json: %s', tsConfigPath);\n    console.log('Path prefix: %s', pathPrefix);\n    console.log('Webpack configuration: %s', JSON.stringify(config, null, 2));\n  }\n  return config;\n};\n","module.exports = require(\"terser-webpack-plugin\");","module.exports = require(\"clean-webpack-plugin\");","module.exports = require(\"webpack-manifest-plugin\");"],"sourceRoot":""}